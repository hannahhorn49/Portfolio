# Load the necessary package
library(DT)
# Step 1: Create the matrix as before
covid_mat <- cbind(tested_cases, positive_cases, active_cases, hospitalized_cases)
# Load the necessary library
library(knitr)
# Step 1: Create the matrix as before
covid_mat <- cbind(tested_cases, positive_cases, active_cases, hospitalized_cases)
# Load the necessary package
library(DT)
# Step 1: Create the matrix as before
covid_mat <- cbind(tested_cases, positive_cases, active_cases, hospitalized_cases)
# Load the necessary library
library(knitr)
# Step 1: Create the matrix as before
covid_mat <- cbind(tested_cases, positive_cases, active_cases, hospitalized_cases)
# 1. Filter the data to focus on country-level data (where Province_State is 'All States')
covid_all_states = covid_data[covid_data$Province_State == "All States", ]
covid_data = read.csv("/Users/hhorn/Projects/Personal/COVID_R_Project/covid19.csv")
dim(covid_data)
# There is 10,903 rows in the dataset
# There is 14 columns in the dataset
head(covid_data)
# 1. Filter the data to focus on country-level data (where Province_State is 'All States')
covid_all_states = covid_data[covid_data$Province_State == "All States", ]
# Remove the 'Province_State' column as it's no longer relevant for country-level analysis
covid_all_states$Province_State = NULL
# Check the first few rows of the filtered data
head(covid_all_states)
# 2. Filter columns containing cumulative data (e.g., positive, hospitalized, recovered, death, total_tested)
covid_all_states_total = covid_all_states[, c("Date", "Continent_Name", "Two_Letter_Country_Code", "positive", "hospitalized", "recovered", "death", "total_tested")]
# Check the first few rows of the cumulative data
head(covid_all_states_total)
# 3. Filter columns containing daily data (e.g., active, hospitalizedCurr, daily_tested, daily_positive)
covid_all_states_daily = covid_all_states[, c("Date", "Country_Region", "active", "hospitalizedCurr", "daily_tested", "daily_positive")]
# Check the first few rows of the daily data
head(covid_all_states_daily)
#hello
#h
# h
covid_data = read.csv("/Users/hhorn/Projects/Personal/COVID_R_Project/covid19.csv")
dim(covid_data)
# There is 10,903 rows in the dataset
# There is 14 columns in the dataset
head(covid_data)
# 1. Filter the data to focus on country-level data (where Province_State is 'All States')
covid_all_states = covid_data[covid_data$Province_State == "All States", ]
# Remove the 'Province_State' column as it's no longer relevant for country-level analysis
covid_all_states$Province_State = NULL
# Check the first few rows of the filtered data
head(covid_all_states)
# 2. Filter columns containing cumulative data (e.g., positive, hospitalized, recovered, death, total_tested)
covid_all_states_total = covid_all_states[, c("Date", "Continent_Name", "Two_Letter_Country_Code", "positive", "hospitalized", "recovered", "death", "total_tested")]
# Check the first few rows of the cumulative data
head(covid_all_states_total)
# 3. Filter columns containing daily data (e.g., active, hospitalizedCurr, daily_tested, daily_positive)
covid_all_states_daily = covid_all_states[, c("Date", "Country_Region", "active", "hospitalizedCurr", "daily_tested", "daily_positive")]
# Check the first few rows of the daily data
head(covid_all_states_daily)
# h
covid_data = read.csv("/Users/hhorn/Projects/Personal/COVID_R_Project/covid19.csv")
dim(covid_data)
# There is 10,903 rows in the dataset
# There is 14 columns in the dataset
head(covid_data)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Country_Region, data = covid_all_states_total, FUN = max)
# first filter the data to focus on country-level data (where Province_State is 'All States')
covid_all_states = covid_data[covid_data$Province_State == "All States", ]
# remove the 'Province_State' column -- not relevant
covid_all_states$Province_State = NULL
head(covid_all_states)
# next filter columns containing cumulative data (e.g., positive, hospitalized, recovered, death, total_tested)
covid_all_states_total = covid_all_states[, c("Date", "Continent_Name", "Two_Letter_Country_Code", "positive", "hospitalized", "recovered", "death", "total_tested")]
head(covid_all_states_total)
# finally filter columns containing daily data (e.g., active, hospitalizedCurr, daily_tested, daily_positive)
covid_all_states_daily = covid_all_states[, c("Date", "Country_Region", "active", "hospitalizedCurr", "daily_tested", "daily_positive")]
head(covid_all_states_daily)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Country_Region, data = covid_all_states_total, FUN = max)
colnames(covid_all_states_total)
# summarize the total number of positive cases by country
# country_positive_cases = aggregate(positive~Country_Region, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
colnames(covid_all_states_total)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
head(country_positive_cases_sorted)
colnames(covid_all_states_total)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
country_positive_cases_sorted
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
country_positive_cases_sorted
library(knitr)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
country_positive_cases_sorted
library(knitr)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
# display the table
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
library(knitr)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
# display the table
kable(country_positive_cases_sorted, caption = "Total Positive COVID-19 Cases Per Country")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
# display the table
kable(country_positive_cases_sorted, caption = "Total Positive COVID-19 Cases Per Country")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted$Country_Name = countrycode(country_positive_cases_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
country_positive_cases_sorted = country_positive_cases_sorted[, c("Country_Name", "positive")]
# display the table
kable(country_positive_cases_sorted, caption = "Total Positive COVID-19 Cases Per Country")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
# Add the country names based on two-letter country code
country_positive_cases_sorted$Country_Name <- countrycode(country_positive_cases_sorted$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
# Add the country names based on two-letter country code
country_positive_cases_sorted$Country_Name <- countrycode(country_positive_cases_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted$Country_Name = countrycode(country_positive_cases_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted$Country_Name = countrycode(country_positive_cases_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted$Country_Name = countrycode(country_positive_cases_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Add the country names based on two-letter country code
country_positive_cases_sorted$Country_Name <- countrycode(country_positive_cases_sorted$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Add the country names based on two-letter country code
country_positive_cases_sorted$Country_Name <- countrycode(country_positive_cases_sorted$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
# Load necessary libraries
library(knitr)
library(countrycode)
# Step 1: Summarize the total number of positive cases by country
country_positive_cases <- aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Step 2: Add the country names based on two-letter country code
country_positive_cases$Country_Name <- countrycode(country_positive_cases$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
# Step 3: Remove the 'Two_Letter_Country_Code' column, keeping only 'Country_Name' and 'positive'
country_positive_cases_sorted <- country_positive_cases[, c("Country_Name", "positive")]
# Step 4: Optional - Format the 'positive' column for readability (adding commas)
country_positive_cases_sorted$positive <- format(country_positive_cases_sorted$positive, big.mark = ",", scientific = FALSE)
# Step 5: Display the table with knitr's kable
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
# Load necessary libraries
library(knitr)
library(countrycode)
# Step 1: Summarize the total number of positive cases by country
country_positive_cases <- aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Step 2: Add the country names based on two-letter country code
country_positive_cases$Country_Name <- countrycode(country_positive_cases$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
# Step 3: Remove the 'Two_Letter_Country_Code' column, keeping only 'Country_Name' and 'positive'
country_positive_cases_sorted <- country_positive_cases[, c("Country_Name", "Positive")]
# Load necessary libraries
library(knitr)
library(countrycode)
# Step 1: Summarize the total number of positive cases by country
country_positive_cases <- aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Step 2: Add the country names based on two-letter country code
country_positive_cases$Country_Name <- countrycode(country_positive_cases$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
# Step 3: Remove the 'Two_Letter_Country_Code' column, keeping only 'Country_Name' and 'positive'
country_positive_cases_sorted <- country_positive_cases[, c("Country_Name", "positive")]
# Step 4: Optional - Format the 'positive' column for readability (adding commas)
country_positive_cases_sorted$positive <- format(country_positive_cases_sorted$positive, big.mark = ",", scientific = FALSE)
# Step 5: Display the table with knitr's kable
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
# Load necessary libraries
library(knitr)
library(countrycode)
# Step 1: Summarize the total number of positive cases by country
country_positive_cases <- aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Step 2: Add the country names based on two-letter country code
country_positive_cases$Country_Name <- countrycode(country_positive_cases$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
# Step 3: Remove the 'Two_Letter_Country_Code' column, keeping only 'Country_Name' and 'positive'
country_positive_cases_sorted <- country_positive_cases[, c("Country_Name", "positive")]
# Step 4: Sort by 'positive' in descending order
country_positive_cases_sorted <- country_positive_cases_sorted[order(-country_positive_cases_sorted$positive), ]
# Step 5: Optional - Format the 'positive' column for readability (adding commas)
country_positive_cases_sorted$positive <- format(country_positive_cases_sorted$positive, big.mark = ",", scientific = FALSE)
# Step 6: Display the sorted table with knitr's kable
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
# Load necessary libraries
library(knitr)
library(countrycode)
# Step 1: Summarize the total number of positive cases by country
country_positive_cases <- aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Step 2: Add the country names based on two-letter country code
country_positive_cases$Country_Name <- countrycode(country_positive_cases$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
# Step 3: Remove the 'Two_Letter_Country_Code' column, keeping only 'Country_Name' and 'positive'
country_positive_cases_sorted <- country_positive_cases[, c("Country_Name", "positive")]
# Step 4: Sort by 'positive' in descending order
country_positive_cases_sorted <- country_positive_cases_sorted[order(-country_positive_cases_sorted$positive), ]
# Step 5: Optional - Format the 'positive' column for readability (adding commas)
country_positive_cases_sorted$positive <- format(country_positive_cases_sorted$positive, big.mark = ",", scientific = FALSE)
# Step 6: Display the sorted table with knitr's kable
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
library(knitr) # to format results table
library(countrycode) # converts country codes to full name
# group the data by country code and calculate total number of positive cases for each country
country_positive_cases = aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# use the countrycode package to add names based on code
country_positive_cases$Country_Name = countrycode(country_positive_cases$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
# select country_name and positive columns for result table
country_positive_cases_sorted =  country_positive_cases[, c("Country_Name", "positive")]
# sort the total positive cases in descending order
country_positive_cases_sorted = country_positive_cases_sorted[order(-country_positive_cases_sorted$positive), ]
# format the positive cases for better readability
country_positive_cases_sorted$positive <- format(country_positive_cases_sorted$positive, big.mark = ",", scientific = FALSE)
# display table
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
