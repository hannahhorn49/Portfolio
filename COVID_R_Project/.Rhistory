head(covid_data)
# 1. Filter the data to focus on country-level data (where Province_State is 'All States')
covid_all_states = covid_data[covid_data$Province_State == "All States", ]
# Remove the 'Province_State' column as it's no longer relevant for country-level analysis
covid_all_states$Province_State = NULL
# Check the first few rows of the filtered data
head(covid_all_states)
# 2. Filter columns containing cumulative data (e.g., positive, hospitalized, recovered, death, total_tested)
covid_all_states_total = covid_all_states[, c("Date", "Continent_Name", "Two_Letter_Country_Code", "positive", "hospitalized", "recovered", "death", "total_tested")]
# Check the first few rows of the cumulative data
head(covid_all_states_total)
# 3. Filter columns containing daily data (e.g., active, hospitalizedCurr, daily_tested, daily_positive)
covid_all_states_daily = covid_all_states[, c("Date", "Country_Region", "active", "hospitalizedCurr", "daily_tested", "daily_positive")]
# Check the first few rows of the daily data
head(covid_all_states_daily)
#hello
#h
# h
covid_data = read.csv("/Users/hhorn/Projects/Personal/COVID_R_Project/covid19.csv")
dim(covid_data)
# There is 10,903 rows in the dataset
# There is 14 columns in the dataset
head(covid_data)
# 1. Filter the data to focus on country-level data (where Province_State is 'All States')
covid_all_states = covid_data[covid_data$Province_State == "All States", ]
# Remove the 'Province_State' column as it's no longer relevant for country-level analysis
covid_all_states$Province_State = NULL
# Check the first few rows of the filtered data
head(covid_all_states)
# 2. Filter columns containing cumulative data (e.g., positive, hospitalized, recovered, death, total_tested)
covid_all_states_total = covid_all_states[, c("Date", "Continent_Name", "Two_Letter_Country_Code", "positive", "hospitalized", "recovered", "death", "total_tested")]
# Check the first few rows of the cumulative data
head(covid_all_states_total)
# 3. Filter columns containing daily data (e.g., active, hospitalizedCurr, daily_tested, daily_positive)
covid_all_states_daily = covid_all_states[, c("Date", "Country_Region", "active", "hospitalizedCurr", "daily_tested", "daily_positive")]
# Check the first few rows of the daily data
head(covid_all_states_daily)
# h
covid_data = read.csv("/Users/hhorn/Projects/Personal/COVID_R_Project/covid19.csv")
dim(covid_data)
# There is 10,903 rows in the dataset
# There is 14 columns in the dataset
head(covid_data)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Country_Region, data = covid_all_states_total, FUN = max)
# first filter the data to focus on country-level data (where Province_State is 'All States')
covid_all_states = covid_data[covid_data$Province_State == "All States", ]
# remove the 'Province_State' column -- not relevant
covid_all_states$Province_State = NULL
head(covid_all_states)
# next filter columns containing cumulative data (e.g., positive, hospitalized, recovered, death, total_tested)
covid_all_states_total = covid_all_states[, c("Date", "Continent_Name", "Two_Letter_Country_Code", "positive", "hospitalized", "recovered", "death", "total_tested")]
head(covid_all_states_total)
# finally filter columns containing daily data (e.g., active, hospitalizedCurr, daily_tested, daily_positive)
covid_all_states_daily = covid_all_states[, c("Date", "Country_Region", "active", "hospitalizedCurr", "daily_tested", "daily_positive")]
head(covid_all_states_daily)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Country_Region, data = covid_all_states_total, FUN = max)
colnames(covid_all_states_total)
# summarize the total number of positive cases by country
# country_positive_cases = aggregate(positive~Country_Region, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
colnames(covid_all_states_total)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
head(country_positive_cases_sorted)
colnames(covid_all_states_total)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
country_positive_cases_sorted
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
country_positive_cases_sorted
library(knitr)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
country_positive_cases_sorted
library(knitr)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
# display the table
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
library(knitr)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
# display the table
kable(country_positive_cases_sorted, caption = "Total Positive COVID-19 Cases Per Country")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
# display the table
kable(country_positive_cases_sorted, caption = "Total Positive COVID-19 Cases Per Country")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted$Country_Name = countrycode(country_positive_cases_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
country_positive_cases_sorted = country_positive_cases_sorted[, c("Country_Name", "positive")]
# display the table
kable(country_positive_cases_sorted, caption = "Total Positive COVID-19 Cases Per Country")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
# Add the country names based on two-letter country code
country_positive_cases_sorted$Country_Name <- countrycode(country_positive_cases_sorted$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
# Add the country names based on two-letter country code
country_positive_cases_sorted$Country_Name <- countrycode(country_positive_cases_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted$Country_Name = countrycode(country_positive_cases_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted$Country_Name = countrycode(country_positive_cases_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# sort the data in descending order
country_positive_cases_sorted$Country_Name = countrycode(country_positive_cases_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Add the country names based on two-letter country code
country_positive_cases_sorted$Country_Name <- countrycode(country_positive_cases_sorted$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
library(knitr)
library(countrycode)
# summarize the total number of positive cases by country
country_positive_cases = aggregate(positive~Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Add the country names based on two-letter country code
country_positive_cases_sorted$Country_Name <- countrycode(country_positive_cases_sorted$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
# Load necessary libraries
library(knitr)
library(countrycode)
# Step 1: Summarize the total number of positive cases by country
country_positive_cases <- aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Step 2: Add the country names based on two-letter country code
country_positive_cases$Country_Name <- countrycode(country_positive_cases$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
# Step 3: Remove the 'Two_Letter_Country_Code' column, keeping only 'Country_Name' and 'positive'
country_positive_cases_sorted <- country_positive_cases[, c("Country_Name", "positive")]
# Step 4: Optional - Format the 'positive' column for readability (adding commas)
country_positive_cases_sorted$positive <- format(country_positive_cases_sorted$positive, big.mark = ",", scientific = FALSE)
# Step 5: Display the table with knitr's kable
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
# Load necessary libraries
library(knitr)
library(countrycode)
# Step 1: Summarize the total number of positive cases by country
country_positive_cases <- aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Step 2: Add the country names based on two-letter country code
country_positive_cases$Country_Name <- countrycode(country_positive_cases$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
# Step 3: Remove the 'Two_Letter_Country_Code' column, keeping only 'Country_Name' and 'positive'
country_positive_cases_sorted <- country_positive_cases[, c("Country_Name", "Positive")]
# Load necessary libraries
library(knitr)
library(countrycode)
# Step 1: Summarize the total number of positive cases by country
country_positive_cases <- aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Step 2: Add the country names based on two-letter country code
country_positive_cases$Country_Name <- countrycode(country_positive_cases$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
# Step 3: Remove the 'Two_Letter_Country_Code' column, keeping only 'Country_Name' and 'positive'
country_positive_cases_sorted <- country_positive_cases[, c("Country_Name", "positive")]
# Step 4: Optional - Format the 'positive' column for readability (adding commas)
country_positive_cases_sorted$positive <- format(country_positive_cases_sorted$positive, big.mark = ",", scientific = FALSE)
# Step 5: Display the table with knitr's kable
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
# Load necessary libraries
library(knitr)
library(countrycode)
# Step 1: Summarize the total number of positive cases by country
country_positive_cases <- aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Step 2: Add the country names based on two-letter country code
country_positive_cases$Country_Name <- countrycode(country_positive_cases$Two_Letter_Country_Code,
origin = "iso2c", destination = "country.name")
# Step 3: Remove the 'Two_Letter_Country_Code' column, keeping only 'Country_Name' and 'positive'
country_positive_cases_sorted <- country_positive_cases[, c("Country_Name", "positive")]
# Step 4: Sort by 'positive' in descending order
country_positive_cases_sorted <- country_positive_cases_sorted[order(-country_positive_cases_sorted$positive), ]
# Step 5: Optional - Format the 'positive' column for readability (adding commas)
country_positive_cases_sorted$positive <- format(country_positive_cases_sorted$positive, big.mark = ",", scientific = FALSE)
# Step 6: Display the sorted table with knitr's kable
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
# Load necessary libraries
library(knitr)
library(countrycode)
# Step 1: Summarize the total number of positive cases by country
country_positive_cases <- aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# Step 2: Add the country names based on two-letter country code
country_positive_cases$Country_Name <- countrycode(country_positive_cases$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
# Step 3: Remove the 'Two_Letter_Country_Code' column, keeping only 'Country_Name' and 'positive'
country_positive_cases_sorted <- country_positive_cases[, c("Country_Name", "positive")]
# Step 4: Sort by 'positive' in descending order
country_positive_cases_sorted <- country_positive_cases_sorted[order(-country_positive_cases_sorted$positive), ]
# Step 5: Optional - Format the 'positive' column for readability (adding commas)
country_positive_cases_sorted$positive <- format(country_positive_cases_sorted$positive, big.mark = ",", scientific = FALSE)
# Step 6: Display the sorted table with knitr's kable
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
library(knitr) # to format results table
library(countrycode) # converts country codes to full name
# group the data by country code and calculate total number of positive cases for each country
country_positive_cases = aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# use the countrycode package to add names based on code
country_positive_cases$Country_Name = countrycode(country_positive_cases$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
# select country_name and positive columns for result table
country_positive_cases_sorted =  country_positive_cases[, c("Country_Name", "positive")]
# sort the total positive cases in descending order
country_positive_cases_sorted = country_positive_cases_sorted[order(-country_positive_cases_sorted$positive), ]
# format the positive cases for better readability
country_positive_cases_sorted$positive <- format(country_positive_cases_sorted$positive, big.mark = ",", scientific = FALSE)
# display table
kable(country_positive_cases_sorted, caption = "Countries with the Most Positive COVID-19 Cases")
covid_data = read.csv("/Users/hhorn/Projects/Personal/COVID_R_Project/covid19.csv")
dim(covid_data)
# There is 10,903 rows in the dataset
# There is 14 columns in the dataset
# filter the data to focus on country-level data (where Province_State is 'All States')
covid_all_states = covid_data[covid_data$Province_State == "All States", ]
# remove the 'Province_State' column -- not relevant
covid_all_states$Province_State = NULL
# filter columns containing cumulative data
covid_all_states_total = covid_all_states[, c("Date", "Continent_Name" , "Two_Letter_Country_Code", "positive", "hospitalized", "recovered", "death", "total_tested")]
# filter columns containing daily data
covid_all_states_daily = covid_all_states[, c("Date","Continent_Name", "Country_Region", "active", "hospitalizedCurr", "daily_tested", "daily_positive")]
# main libraries used for analysis imported here
library(ggplot2)
library(dplyr)
library(countrycode)  # to convert country codes to full name
library(scales)
library(knitr)
# use the aggregate function to group the data by country and calculate the total number of positive cases for each country
country_positive_cases =  aggregate(positive ~ Two_Letter_Country_Code, data = covid_all_states_total, FUN = max)
# convert country code to country names
country_positive_cases$Country_Name = countrycode(country_positive_cases$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
# to find most positive cases -> sort in descending order
country_positive_cases_sorted = country_positive_cases[order(-country_positive_cases$positive), ]
# identify the top 10 countries from list
top_10_positive_cases = head(country_positive_cases_sorted, 10)
# check that it is a numeric value
top_10_positive_cases$positive = as.numeric(top_10_positive_cases$positive)
# visualization of top 10 countries
ggplot(top_10_positive_cases, aes(x = reorder(Country_Name, positive), y = positive, fill = Country_Name)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Countries with the Most Positive COVID-19 Cases",
x = "Country",
y = "Total Positive Cases (Cumulative)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)
# filter the data
covid_daily_positive = covid_all_states_daily[, c("Date", "Continent_Name", "Country_Region", "daily_positive")]
# aggregate daily new cases globally
global_daily_positive = aggregate(daily_positive~Date, data = covid_daily_positive, FUN = sum)
# check that the date column is treated as a date type
global_daily_positive$Date = as.Date(global_daily_positive$Date)
# visualization
ggplot(global_daily_positive, aes(x = Date, y = daily_positive)) +
geom_line(color = "orange", size = 0.5) +
labs(title = "Global Trend of Daily New Positive COVID-19 Cases",
x = "Date",
y = "Daily New Positive Cases") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = "1 week", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# aggregate daily new cases by continent
continent_daily_positive = aggregate(daily_positive~Date + Continent_Name, data = covid_daily_positive, FUN = sum)
# visualization -- side by side comparison
ggplot(country_daily_positive, aes(x = Date, y = daily_positive, color = Continent_Name)) +
geom_line(size = 0.5) +
labs(title = "Daily New Positive COVID-19 Cases by Continent",
x = "Date",
y = "Daily New Positive Cases") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = "1 month", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1, size = 1)) +
facet_wrap(~ Continent_Name, scales = "free_y")
# filter the data
covid_daily_positive = covid_all_states_daily[, c("Date", "Continent_Name", "Country_Region", "daily_positive")]
# aggregate daily new cases globally
global_daily_positive = aggregate(daily_positive~Date, data = covid_daily_positive, FUN = sum)
# check that the date column is treated as a date type
global_daily_positive$Date = as.Date(global_daily_positive$Date)
# visualization
ggplot(global_daily_positive, aes(x = Date, y = daily_positive)) +
geom_line(color = "orange", linewidth = 0.5) +
labs(title = "Global Trend of Daily New Positive COVID-19 Cases",
x = "Date",
y = "Daily New Positive Cases") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = "1 week", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# aggregate daily new cases by continent
continent_daily_positive = aggregate(daily_positive~Date + Continent_Name, data = covid_daily_positive, FUN = sum)
# visualization -- side by side comparison
ggplot(country_daily_positive, aes(x = Date, y = daily_positive, color = Continent_Name)) +
geom_line(size = 0.5) +
labs(title = "Daily New Positive COVID-19 Cases by Continent",
x = "Date",
y = "Daily New Positive Cases") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = "1 month", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1, size = 1)) +
facet_wrap(~ Continent_Name, scales = "free_y")
# aggregate daily new cases by continent
continent_daily_positive = aggregate(daily_positive~Date + Continent_Name, data = covid_daily_positive, FUN = sum)
# visualization -- side by side comparison
ggplot(continent_daily_positive, aes(x = Date, y = daily_positive, color = Continent_Name)) +
geom_line(size = 0.5) +
labs(title = "Daily New Positive COVID-19 Cases by Continent",
x = "Date",
y = "Daily New Positive Cases") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = "1 month", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1, size = 1)) +
facet_wrap(~ Continent_Name, scales = "free_y")
# aggregate daily new cases by continent
continent_daily_positive = aggregate(daily_positive~Date + Continent_Name, data = covid_daily_positive, FUN = sum)
# check that the date column is treated as a date type
continent_daily_positive$Date = as.Date(continent_daily_positive$Date)
# visualization -- side by side comparison
ggplot(continent_daily_positive, aes(x = Date, y = daily_positive, color = Continent_Name)) +
geom_line(size = 0.5) +
labs(title = "Daily New Positive COVID-19 Cases by Continent",
x = "Date",
y = "Daily New Positive Cases") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = "1 month", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1, size = 1)) +
facet_wrap(~ Continent_Name, scales = "free_y")
# filter data
covid_all_states_daily = covid_all_states[, c("Date", "hospitalizedCurr")]
# check that the date column is treated as a date type
covid_all_states_daily$Date = as.Date(covid_all_states_daily$Date)
# aggregate daily actively hospitalized cases globally (sum by Date)
global_daily_hospitalized_curr = aggregate(hospitalizedCurr ~ Date, data = covid_all_states_daily, FUN = sum)
# visualization of global trend of actively hospitalized cases
ggplot(global_daily_hospitalized_curr, aes(x = Date, y = hospitalizedCurr)) +
geom_line(color = "red", size = 0.5) +
labs(title = "Global Trend of Actively Hospitalized COVID-19 Cases",
x = "Date",
y = "Active Hospitalized Cases") +
scale_y_continuous(labels = scales::comma) +
scale_x_date(date_breaks = "10 days", date_labels = "%m-%d") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# check that both attributes are treated as numeric and remove any NAs
covid_all_states_total$positive = as.numeric(covid_all_states_total$positive)
covid_all_states_total$death = as.numeric(covid_all_states_total$death)
# find the correlation
correlation = cor(covid_all_states_total$positive, covid_all_states_total$death, use = "complete.obs")
print(paste("Correlation between Positive Cases and Deaths (Globally):", round(correlation, 3)))
# Plot 1: Linear scatter plot with regression line
ggplot(covid_all_states_total, aes(x = positive, y = death)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Global Relationship Between Positive Cases and Deaths",
x = "Cumulative Positive Cases",
y = "Cumulative Deaths") +
scale_x_continuous(labels = scales::comma) +
scale_y_continuous(labels = scales::comma)
# log-transform the data (log base 10) to reduce skewness
covid_all_states_total$log_positive = log10(covid_all_states_total$positive + 1)
covid_all_states_total$log_death = log10(covid_all_states_total$death + 1)
# find the new correlation
log_correlation = cor(covid_all_states_total$log_positive, covid_all_states_total$log_death, use = "complete.obs")
print(paste("Correlation between Log(Positive Cases) and Log(Deaths):", round(log_correlation, 3)))
# Plot 2: Log-transformed scatter plot with regression line
ggplot(covid_all_states_total, aes(x = log_positive, y = log_death)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Log-Transformed Relationship Between Positive Cases and Deaths",
x = "Log(Cumulative Positive Cases)",
y = "Log(Cumulative Deaths)") +
scale_x_continuous(labels = scales::comma) +
scale_y_continuous(labels = scales::comma)
# filter for relevant columns
covid_all_states_filtered = covid_all_states_total[, c("Two_Letter_Country_Code", "positive", "death")]
# check that columns are recognized as numeric
covid_all_states_filtered$positive = as.numeric(covid_all_states_filtered$positive)
covid_all_states_filtered$death = as.numeric(covid_all_states_filtered$death)
# remove rows where positive cases or deaths are NA, or where positive cases are 0
covid_all_states_filtered = covid_all_states_filtered %>%
filter(!is.na(positive), !is.na(death), positive > 0)
# aggregate results by country to get the total positive cases and deaths
country_totals = covid_all_states_filtered %>%
group_by(Two_Letter_Country_Code) %>%
summarise(total_positive = sum(positive), total_death = sum(death)) %>%
ungroup()
# calculate the fatality rate for each country
country_totals = country_totals %>%
mutate(CFR = total_death / total_positive * 100)
# convert from country code to name
country_totals$Country_Name = countrycode(country_totals$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
# sort countries
cfr_sorted = country_totals %>%
arrange(desc(CFR))
# identify top 5 countries with highest fatality
top_5_cfr = head(cfr_sorted, 5)
# find bottom 5 countries (exclude zero to avoid misleading data)
bottom_5_cfr = tail(cfr_sorted[cfr_sorted$CFR > 0, ], 5)
# display the results
kable(top_5_cfr[, c("Country_Name", "CFR")], caption = "Top 5 Countries with Highest Fatality Percentage")
kable(bottom_5_cfr[, c("Country_Name", "CFR")], caption = "Bottom 5 Countries with Lowest Fatality Percentage (Excluding Zero)")
# filter for relevant columns
covid_recovery_data = covid_all_states_total[, c("Two_Letter_Country_Code", "positive", "recovered", "Date")]
# aggregate data by country
covid_recovery_data_latest = covid_recovery_data %>%
group_by(Two_Letter_Country_Code) %>%
filter(Date == max(Date)) %>%
ungroup()
# remove rows with missing or zero recovery or positive cases to avoid errors
covid_recovery_data_latest = covid_recovery_data_latest %>%
filter(positive > 0, recovered > 0)
# calculate each country's recovery rate
covid_recovery_data_latest$recovery_rate = (covid_recovery_data_latest$recovered / covid_recovery_data_latest$positive) * 100
# sort in descending order to find highest
covid_recovery_data_sorted = covid_recovery_data_latest %>%
arrange(desc(recovery_rate))
# convert to country names
covid_recovery_data_sorted$Country_Name = countrycode(covid_recovery_data_sorted$Two_Letter_Country_Code, origin = "iso2c", destination = "country.name")
# identify top 10 countries
top_countries_recovery = head(covid_recovery_data_sorted, 10)
top_countries_recovery$recovery_rate = round(top_countries_recovery$recovery_rate, 2)
# display results
print(top_countries_recovery[, c("Country_Name", "recovery_rate")])
# visualization
ggplot(top_countries_recovery, aes(x = reorder(Country_Name, recovery_rate), y = recovery_rate, fill = Country_Name)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Countries with the Fastest Recovery Rates",
x = "Country",
y = "Recovery Rate (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)
# filter for relevant columns
covid_death_data = covid_all_states_total[, c("Two_Letter_Country_Code", "death")]
# convert country code to name
covid_death_data$Country_Region = countrycode(covid_death_data$Two_Letter_Country_Code, "iso2c", "country.name")
# aggregate data by country
country_deaths = covid_death_data %>%
group_by(Country_Region) %>%
summarise(total_deaths = sum(death, na.rm = TRUE)) %>%
arrange(desc(total_deaths))
# identify top 10 countries
top_10_countries_deaths = head(country_deaths, 10)
# visualization
ggplot(top_10_countries_deaths, aes(x = reorder(Country_Region, total_deaths), y = total_deaths, fill = Country_Region)) +
geom_bar(stat = "identity") +
labs(title = "Top 10 Countries with the Highest Number of COVID-19 Deaths",
x = "Country",
y = "Total Number of Deaths") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = scales::comma)
# input population data for each country
population_data = data.frame(
Country_Region = c("United States", "Russia", "Italy", "India", "Turkey", "Canada",
"United Kingdom", "Australia", "Peru", "Poland"),
population = c(331002651, 145934462, 60461826, 1380004385, 84339067, 37742154,
67886011, 25499884, 32971854, 37846611)
)
# add country codes column
population_data$Two_Letter_Country_Code = countrycode(population_data$Country_Region, "country.name", "iso2c")
covid_test_data = covid_all_states_total[, c("Two_Letter_Country_Code", "total_tested")]
# merge the population data with rest of data
covid_test_data = merge(covid_test_data, population_data, by = "Two_Letter_Country_Code")
# calculate testing rate
covid_test_data$tests_per_capita = covid_test_data$total_tested / covid_test_data$population
# sort the results
covid_test_data_sorted = covid_test_data %>%
arrange(desc(tests_per_capita))
# visualization
ggplot(covid_test_data_sorted, aes(x = reorder(Country_Region, tests_per_capita), y = tests_per_capita, fill = Country_Region)) +
geom_bar(stat = "identity") +  # Bar chart for tests per capita
labs(title = "COVID-19 Testing Efforts Relative to Population Size",
x = "Country",
y = "Tests Per Capita") +
theme_minimal() +  # Minimal theme for a clean chart
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
scale_y_continuous(labels = scales::comma) +  # Format y-axis with commas for readability
coord_flip()  # Flip the coordinates so bars are horizontal
